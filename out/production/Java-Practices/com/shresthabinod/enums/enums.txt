Enumeration:

public enum Level{
            HIGH, MEDIUM, LOW
            }
Why enum?
1. define own data type

## Important notes on Enum:
- every enum constant is an object
- every enum is used as class concept
- every enum constant is public static final
     public static final HIGH = new Level();
     public static final MEDIUM = new Level();
- enum can be declared inside the class or outside the class
    example:
    # outside class
    public enum Level{
        HIGH, MEDIUM, LOW
    }
    public Test{

    }
    # inside the class
     public Test{
         public enum Level{
                HIGH, MEDIUM, LOW
            }
    }
- enum type must not be local

# enum vs inheritance
- enum itself is child class of  java.lang.enum class
- enum cannot extend any other enum(Multiple inheritance is not allowed)
- child cannot be created from enum (enum is final implicitly)
- no class can extend enum as well

# enum and interface
- enum can implement any # of interfaces
-

- applicable modifiers for enum
    - if outside the class declared
        * public,
        * default and
        * static
    - if inside the class
        * public,
        * default,
        * strictfp,
        * private,
        * static,
        * protected

- enum vs switch statement

#### ordinal()
- it provides the index of the enum constant
## Important Note:
- if the enum has any method or other member besides enum constants, the constants should end with ";".

